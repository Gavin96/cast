{
  "_args": [
    [
      "malarkey",
      "/home/gavin/Desktop/forecast-angular"
    ]
  ],
  "_from": "malarkey",
  "_id": "malarkey@1.3.3",
  "_inCache": true,
  "_installable": true,
  "_location": "/malarkey",
  "_phantomChildren": {},
  "_requested": {
    "name": null,
    "raw": "malarkey",
    "rawSpec": "malarkey",
    "scope": null,
    "spec": "/home/gavin/Desktop/forecast-angular/malarkey",
    "type": "directory"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "file:malarkey",
  "_shasum": "8cf54d05302511387794e1214bfcbb18af73e4a3",
  "_shrinkwrap": null,
  "_spec": "malarkey",
  "_where": "/home/gavin/Desktop/forecast-angular",
  "author": {
    "name": "Lim Yuan Qing"
  },
  "bugs": {
    "url": "https://github.com/yuanqing/malarkey/issues"
  },
  "dependencies": {},
  "description": "Simulate a typewriter/ticker effect on a DOM element.",
  "devDependencies": {
    "browserify-istanbul": "^0.2.1",
    "del": "^2.2.0",
    "gulp": "^3.9.0",
    "gulp-jshint": "^2.0.0",
    "gulp-rename": "^1.2.2",
    "gulp-uglify": "^1.5.1",
    "jasmine-core": "^2.4.1",
    "jasmine-jquery": "^2.1.1",
    "jquery": "^2.2.0",
    "jshint": "^2.8.0",
    "jshint-stylish": "^2.1.0",
    "karma": "^0.13.19",
    "karma-browserify": "^4.4.2",
    "karma-coverage": "0.5.3",
    "karma-jasmine": "^0.3.6",
    "karma-phantomjs-launcher": "^0.2.3",
    "karma-spec-reporter": "^0.0.23",
    "phantomjs": "^1.9.19"
  },
  "gitHead": "3b1b9edeeebb46839f6d432e444be3f52f8ee679",
  "homepage": "https://github.com/yuanqing/malarkey#readme",
  "keywords": [
    "animate",
    "terminal",
    "text",
    "type",
    "typewriter"
  ],
  "license": "MIT",
  "name": "malarkey",
  "optionalDependencies": {},
  "readme": "# Malarkey.js [![npm Version](http://img.shields.io/npm/v/malarkey.svg?style=flat)](https://www.npmjs.org/package/malarkey) [![Build Status](https://img.shields.io/travis/yuanqing/malarkey.svg?branch=master&style=flat)](https://travis-ci.org/yuanqing/malarkey) [![Coverage Status](https://img.shields.io/coveralls/yuanqing/malarkey.svg?style=flat)](https://coveralls.io/r/yuanqing/malarkey)\n\n> Simulate a typewriter/ticker effect on a DOM element.\n\n## Features\n\n- [Friendly, flexible API](#api) offering fine-grained control\n- Option to [repeat the effect indefinitely](#usage)\n- Option to apply the effect on a [custom element property](#custom-element-property)\n- Allows [pausing and resuming](#pausing-and-resuming) the sequence on-the-fly\n- [Extensive tests](test), with [100% coverage](https://coveralls.io/r/yuanqing/malarkey)\n- No dependencies, and super lightweight; just 1.5 KB [minified](dist/malarkey.min.js), or 0.8 KB minified and gzipped\n\nFor an in-production demo, see [the npm front page](https://npmjs.com).\n\n## Usage\n\n> [**Editable demo**](http://jsfiddle.net/xchon0kt/)\n\n```html\n<body>\n  <div class=\"malarkey\"></div>\n  <script src=\"../dist/malarkey.min.js\"></script>\n  <script>\n    var elem = document.querySelector('.malarkey');\n    var opts = {\n      typeSpeed: 50,\n      deleteSpeed: 50,\n      pauseDelay: 2000,\n      loop: true,\n      postfix: ''\n    };\n    malarkey(elem, opts).type('Say hello')   .pause().delete()\n                        .type('Wave goodbye').pause().delete();\n  </script>\n</body>\n```\n\n### Custom element property\n\nBy default, the effect is applied on `elem.innerHTML`. To apply the effect on a different element property (such as the `placeholder` attribute of an `input` element), pass in `opts.getter` and `opts.setter`, like so:\n\n> [**Editable demo**](http://jsfiddle.net/za9mazh3/)\n\n```html\n<body>\n  <input type=\"text\" class=\"malarkey\">\n  <script src=\"../dist/malarkey.min.js\"></script>\n  <script>\n    var elem = document.querySelector('.malarkey');\n    var attr = 'placeholder';\n    var opts = {\n      loop: true,\n      getter: function(elem) {\n        return elem.getAttribute(attr) || '';\n      },\n      setter: function(elem, val) {\n        elem.setAttribute(attr, val);\n      }\n    };\n    malarkey(elem, opts).type('Say hello')   .pause().delete()\n                        .type('Wave goodbye').pause().delete();\n  </script>\n</body>\n```\n\n### Pausing and resuming\n\nTo pause and resume the sequence on-the-fly, use the `triggerPause` and `triggerResume` methods:\n\n> [**Editable demo**](http://jsfiddle.net/4gqpsazu/)\n\n```html\n<body>\n  <div class=\"malarkey\"></div>\n  <script src=\"../dist/malarkey.min.js\"></script>\n  <script>\n    var elem = document.querySelector('.malarkey');\n    var opts = {\n      typeSpeed: 50,\n      deleteSpeed: 50,\n      pauseDelay: 2000,\n      loop: true,\n      postfix: ''\n    };\n    var m = malarkey(elem, opts).type('Say hello')   .pause().delete()\n                                .type('Wave goodbye').pause().delete();\n    document.addEventListener('click', function() {\n      if (m.isRunning()) {\n        m.triggerPause();\n        elem.style.color = 'red';\n      } else {\n        m.triggerResume();\n        elem.style.color = 'black';\n      }\n    });\n  </script>\n</body>\n```\n\nNote that here, we toggle between calling `triggerPause` and `triggerResume` on every `click` event.\n\n## API\n\nIn the browser, `malarkey` is a global variable. In Node, do:\n\n```js\nvar malarkey = require('malarkey');\n```\n\n### var m = malarkey(elem [, opts])\n\nInitialises the typewriter/ticker effect on `elem` with the given `opts` settings.\n\n- `elem` &mdash; A DOM element.\n\n- `opts` &mdash; An object literal:\n\n  Key | Description | Default\n  :--|:--|:--\n  `loop` | Whether to repeat the entire sequence | `false`\n  `typeSpeed` | Time in milliseconds to `type` a single character | `50`\n  `deleteSpeed` | Time in milliseconds to `delete` a single character | `50`\n  `pauseDelay` | Delay in milliseconds to `pause` | `2000`\n  `postfix` | A string appended to any `str` passed to `type` and `delete` | `''`\n  `getter` | A function to get the current value of `elem` | Returns `elem.innerHTML`\n  `setter` | A function to assign a new value to `elem` | Assigns to `elem.innerHTML`\n\n### m.type(str [, speed])\n\nType the `str` at the given `speed`.\n\n- `speed` &mdash; Defaults to `opts.typeSpeed`.\n\n### m.delete()\n\nDelete the contents of `elem`, one character at a time, at the default speed.\n\n### m.delete(str [, speed])\n\nDelete the given `str`, one character at a time, at the given `speed`.\n\n- `str` &mdash; `null`, or a string. If `null`, deletes every character in `elem`. Else deletes `str` from `elem` if and only if `elem` ends with `str`.\n- `speed` &mdash; Defaults to `opts.deleteSpeed`.\n\n### m.delete(n [, speed])\n\nDelete the last `n` characters of `elem`, one character at a time, at the given `speed`.\n\n- `n` &mdash; An integer. If `-1`, deletes every character in `elem`. Else deletes the last `n` characters of `elem`.\n- `speed` &mdash; Defaults to `opts.deleteSpeed`.\n\n### m.clear()\n\nClear the contents of `elem`.\n\n### m.pause([delay])\n\nDo nothing for `delay`.\n\n- `delay` &mdash; Defaults to `opts.pauseDelay`.\n\n### m.call(fn)\n\nCall the given `fn`, passing it `elem` as the first argument.\n\n- `fn` &mdash; Can be asynchronous. We must invoke `this` within this function to signal that it has finished execution.\n\n### m.triggerPause([fn])\n\nPauses the sequence. Calls the given `fn` when the sequence has been paused, passing it `elem` as the first argument.\n\n### m.triggerResume()\n\nResumes the sequence *immediately*. Has no effect if the sequence is already running.\n\n### m.isRunning()\n\nReturns `true` if the sequence is currently running. Else returns `false`.\n\n## Installation\n\nInstall via [npm](https://npmjs.com):\n\n```\n$ npm i --save malarkey\n```\n\nInstall via [bower](http://bower.io):\n\n```\n$ bower i --save yuanqing/malarkey\n```\n\n## License\n\n[MIT](LICENSE.md)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/yuanqing/malarkey.git"
  },
  "scripts": {
    "test": "gulp test"
  },
  "version": "1.3.3"
}
